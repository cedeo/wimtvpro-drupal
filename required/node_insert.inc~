<?php

/**
 * @file
 * This file is use for configured form for upload new video.
 *
 */
function wimtvpro_form_alter(&$form, &$form_state, $form_id) {
    $set_into_video = variable_get('contenttypeWithInsertVideo');
    $field_to_insert = "";
    $exists_insert = FALSE;

    if (isset($form_state['field'])) {
        foreach ($form_state['field'] as $key => $value) {
            if (array_key_exists($key, $set_into_video)) {
                $key = str_replace("_", "-", $key);
                $exists_insert = TRUE;
                $field_to_insert = "#edit-" . $key . "-und-0-value";
            }
        }
    }

    if ((strstr($form_id, 'node_form')) && ($exists_insert)) {

        $videos = "<ul class='itemsInsert'>" . wimtvpro_getThumbs(TRUE, FALSE, TRUE) . "</ul><div class='empty'></div>";
        $form['thumbVideo'] = array(
            '#type' => 'item',
            '#title' => t('WimVod'),
            '#markup' => $videos
        );
        
        drupal_add_js("var field_to_insert='" . $field_to_insert. "'", 'inline');
        drupal_add_js(drupal_get_path('module', 'wimtvpro') . '/scripts/wimtvpro_node_insert.js');
    }

    //if (isset($form["#field"]["columns"]["wimvideo"]))
    $form['field']['cardinality']['#options'] = array("1" => "1");
    //if (isset($form["#field"]["columns"]["wimplaylist"]))
    $form['field']['cardinality']['#options'] = array("1" => "1");
}

function wimtvpro_node_view_alter(&$build) {
    global $base_url;
    global $user;
    if (is_array($user->roles) && in_array('administrator', $user->roles)) {
        $cssFile = '/css/wimtvpro.css';
    } else {
        $cssFile = '/css/wimtvpro_public.css';
    }
    drupal_add_css(drupal_get_path('module', 'wimtvpro') . $cssFile, array('group' => CSS_DEFAULT, 'every_page' => TRUE));


    $set_into_video = variable_get('contenttypeWithInsertVideo');
    if (isset($build)) {
        $valueKey = "";
        foreach ($build as $key => $value) {
            if (array_key_exists($key, $set_into_video)) {
                $valueKey = $key;
                $exists_insert = TRUE;
                $field_to_insert = "#edit-" . $key . "-und-0-value";
                //exit;
            }
        }

        if (isset($build[$valueKey]["#items"][0])) {
            $array_testoformat = $build[$valueKey]["#items"][0];

            foreach ($array_testoformat as $key_testo => $testoformat) {
//            $key_testo = 'value';
//            $testoformat = $array_testoformat['value'];
                // SEARCH FOR WIMTV VIDEOS
                $preg_wimtv = preg_match_all("/\[wimtv](.*?)\[\/wimtv\]/msi", $testoformat, $risultato_wimtv);
                if (isset($risultato_wimtv[1])) {
                    $testoformat = wimtvpro_shortcode_wimtv($valueKey, $risultato_wimtv, $key_testo, $testoformat);
                }

                // SEARCH FOR WIMTV PROGRAMMING
                $preg_wimprog = preg_match_all("/\[wimprog id=\"(.*?)\"\]/msi", $testoformat, $risultato_prog);
                if (isset($risultato_prog[1])) {
                    $testoformat = wimtvpro_shortcode_wimprog($valueKey, $risultato_prog, $key_testo, $testoformat);
                }
                if ($preg_wimtv || $preg_wimprog) {
                    $build[$valueKey]["#items"][0][$key_testo] = $testoformat;
                    $build[$valueKey][0]["#markup"] = $testoformat;
                }
            }
        }
    }
}

function wimtvpro_shortcode_wimtv($valueKey, $risultato, $key_testo, $testoformat) {
    if (isset($risultato[1])) {
        foreach ($risultato[1] as $key => $value) {
            $format_video = explode("|", $value);
            //Recove url video for view it
            $jsonst = wimtvpro_detail_showtime(TRUE, $format_video[0]);
            $arrayjsonst = json_decode($jsonst);
            if (isset($arrayjsonst->{"showtimeIdentifier"})) {
                $showtimeidentifier = $arrayjsonst->{"showtimeIdentifier"};
                $contentid = $arrayjsonst->{"contentId"};
                if (variable_get('nameSkin')) {
                    $directory = file_create_url('public://skinWim');
                    $skin = $directory . "/" . variable_get('nameSkin') . ".zip";
                } else {
                    // NS: IN THIS CASE WE PASS NO SKIN (see also wimtvpro_embedded()
                    // in: wimtvpro/required/embedded.inc
                    //$base_url . "/" . drupal_get_path('module', 'wimtvpro') . "/skin/default.zip";
                    $skin = "";
                }
                // NS: WE HAVE RESTORED THE PREVIOUS (commented) PARAMETERS
                // $params = "get=1&skin=".$skin;
                $params = "get=1&width=" . $format_video[1] . "&height=" . $format_video[2] . "&skin=" . $skin;

                $response = apiGetPlayerShowtime($contentid, $params); // curl_exec($ch);
		// NS: the restored parameters dont give the expected resize behaviour
		// hence we mangle the response iframe on the fly
		$pattern = "/width=\"(\d+)\" height=\"(\d+)\"/";
		$replacement = "width=\"" . $format_video[1] . "\" height=\"" . $format_video[2] .  "\"";
		preg_replace($pattern, $replacement, $response);
                $iframe = $response;
                $testoformat = str_replace("[wimtv]" . $value . "[/wimtv]", $iframe, $testoformat);
            } else {
                $testoformat = str_replace("[wimtv]" . $value . "[/wimtv]", t("The video isn't into WimVod"), $testoformat);
            }
        }
    }
    return $testoformat;
}

function wimtvpro_shortcode_wimprog($valueKey, $risultato, $key_testo, $testoformat) {
    if (isset($risultato[1])) {
        foreach ($risultato[1] as $key => $progId) {
            $iframe = wimtvpro_programming_embedded($progId);
            $testoformat = str_replace("[wimprog id=\"" . $progId . "\"]", $iframe, $testoformat);
        }
    }
    return $testoformat;
}

//function wimtvpro_node_view_alter(&$build) {
//    global $base_url;
//
//    $set_into_video = variable_get('contenttypeWithInsertVideo');
//    if (isset($build)) {
//        $valueKey = "";
//        foreach ($build as $key => $value) {
//
//            if (array_key_exists($key, $set_into_video)) {
//                $valueKey = $key;
//                $exists_insert = TRUE;
//                $field_to_insert = "#edit-" . $key . "-und-0-value";
//                //exit;
//            }
//        }
//
//        if (isset($build[$valueKey]["#items"][0])) {
//            $array_testoformat = $build[$valueKey]["#items"][0];
//            foreach ($array_testoformat as $key_testo => $testoformat) {
//                preg_match_all("/\[wimtv](.*?)\[\/wimtv\]/msi", $testoformat, $risultato);
//                if (isset($risultato[1])) {
//                    foreach ($risultato[1] as $key => $value) {
//                        $format_video = explode("|", $value);
//                        //Recove url video for view it
//                        $jsonst = wimtvpro_detail_showtime(TRUE, $format_video[0]);
//                        $arrayjsonst = json_decode($jsonst);
//                        if (isset($arrayjsonst->{"showtimeIdentifier"})) {
//                            $showtimeidentifier = $arrayjsonst->{"showtimeIdentifier"};
//                            $contentid = $arrayjsonst->{"contentId"};
//                            if (variable_get('nameSkin')) {
//                                $directory = file_create_url('public://skinWim');
//                                $skin = $directory . "/" . variable_get('nameSkin') . ".zip";
//                            } else {
//                                // NS: IN THIS CASE WE PASS NO SKIN (see also wimtvpro_embedded()
//                                // in: wimtvpro/required/embedded.inc
//                                //$base_url . "/" . drupal_get_path('module', 'wimtvpro') . "/skin/default.zip";
//                                $skin = "";
//                            }
//                            // NS: WE HAVE RESTORED THE PREVIOUS (commented) PARAMETERS
//                            // $params = "get=1&skin=".$skin;
//                            $params = "get=1&width=" . $format_video[1] . "&height=" . $format_video[2] . "&skin=" . $skin;
//
//                            $response = apiGetPlayerShowtime($contentid, $params); // curl_exec($ch);
//                            $iframe = $response;
//                            $testoformat = str_replace("[wimtv]" . $value . "[/wimtv]", $iframe, $testoformat);
//                        } else {
//                            $testoformat = str_replace("[wimtv]" . $value . "[/wimtv]", t("The video isn't into WimVod"), $testoformat);
//                        }
//                        $build[$valueKey]["#items"][0][$key_testo] = $testoformat;
//                        $build[$valueKey][0]["#markup"] = $testoformat;
//                    }
//                }
//            }
//        }
//    }
//}
