<?php
  /** 
    * @file
	* This file is use for module wimtvpro.
	*
	*/
// Load default implementations of insert hooks for core modules.
require_once(drupal_get_path('module', 'wimtvpro') . '/required/upload.inc');
require_once(drupal_get_path('module', 'wimtvpro') . '/required/blocks.inc');
require_once(drupal_get_path('module', 'wimtvpro') . '/required/node_insert.inc');
require_once(drupal_get_path('module', 'wimtvpro') . '/required/playlist.inc');
require_once(drupal_get_path('module', 'wimtvpro') . '/required/embedded.inc');
require_once(drupal_get_path('module', 'wimtvpro') . '/required/report.inc');
require_once(drupal_get_path('module', 'wimtvpro') . '/required/help.inc');
require_once(drupal_get_path('module', 'wimtvpro') . '/api/wimtv_api.php');
require_once(drupal_get_path('module', 'wimtvpro') . '/api/analytics_api.php');
require_once(drupal_get_path('module', 'wimtvpro') . '/wimtvpro.admin.php');
require_once(drupal_get_path('module', 'wimtvpro') . '/wimtvpro.templates.php');
require_once(drupal_get_path('module', 'wimtvpro') . "/wimtvpro.function.php");
require_once(drupal_get_path('module', 'wimtvpro') . '/views/wimbox.php');
require_once(drupal_get_path('module', 'wimtvpro') . '/views/wimvod.php');
require_once(drupal_get_path('module', 'wimtvpro') . '/views/wimlive.php');
require_once(drupal_get_path('module', 'wimtvpro') . '/views/playlist.php');


//Principal menu Admin and for User
function wimtvpro_menu() {
    $items = array();
    $items['admin/config/wimtvpro'] =
        array(
            'title' => 'Wimtv configuration',
            'description' => 'On this module config url for Api Wimtv',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('wimtvpro_admin'),
            'access arguments' => array('administer users'),
        );
    $items['admin/config/wimtvpro/wimbox'] =
        array(
            'title' => 'WimBox',
            'description' => 'Allows admins manage media wimtv',
            'page callback' => 'wimtvpro_wimbox',
            'page arguments' => array('wimtvpro_wimbox'),
            'access arguments' => array('administer users'),
            'weight' => 0
        );
    $items['admin/config/wimtvpro/wimvod'] =
        array(
            'title' => 'WimVod',
            'description' => 'Allows admins manage streaming wimtv',
            'page callback' => 'wimtvpro_wimvod',
            'page arguments' => array('wimtvpro_wimvod'),
            'access arguments' => array('administer users'),
            'weight' => 1
        );
    $items['admin/config/wimtvpro/playlist'] =
        array(
            'title' => 'Playlist',
            'description' => 'Manage playlist of media wimtv',
            'page callback' => 'wimtvpro_playlist',
            'page arguments' => array('wimtvpro_playlist'),
            'access arguments' => array('administer users'),
            'weight' => 1
        );
    $items['admin/config/wimtvpro/playlist/modify/%'] =
        array(
            'page callback' => 'drupal_get_form',
            'page arguments' => array('wimtvpro_playlist_mod', 5),
            'access arguments' => array('administer users'),
            'type' =>  MENU_CALLBACK,
        );
    $items['admin/config/wimtvpro/upload'] =
        array(
            'title' => 'Upload Video',
            'description' => 'Video import',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('wimtvpro_upload_form'),
            'access arguments' => array('administer users'),
            'weight' => 2
        );
    $items['admin/config/wimtvpro/wimlive'] =
        array(
            'title' => 'WimLive',
            'description' => 'Configure your live event',
            'page callback' => 'wimtvpro_wimlive',
            'page arguments' => array('wimtvpro_wimlive'),
            'access arguments' => array('administer users'),
            'weight' => 3
        );
    $items['admin/config/wimtvpro/mypersonalBlock'] =
        array(
            'title' => 'My personal detail',
            'description' => 'Configuration personal detail Wimtv block',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('wimtvpro_blockUser_config'),
            'access arguments' => array('administer users'),
            'weight' => 4
        );
    $items['admin/config/wimtvpro/report'] =
        array(
            'title' => 'Report',
            'description' => 'My Report Wimtv',
            'page callback' => 'wimtvpro_report',
            'page arguments' => array('wimtvpro_report'),
            'access arguments' => array('administer users'),
            'weight' => 5
        );
    $items['admin/config/wimtvpro/wimlive/insert'] =
        array(
            'title' => 'Add Event',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('wimtvpro_wimlive_form'),
            'access arguments' => array('administer users'),
            'type' =>  MENU_CALLBACK,
        );
    $items['admin/config/wimtvpro/wimlive/webproducer/%'] =
        array(
            'file' => 'required/webproducer.inc',
            'page arguments' => array('wimtvproWebProducer',5),
            'access arguments' => array('administer users'),
            'page callback' => 'wimtvproWebProducer',
            'access callback' => TRUE,
            'type' =>  MENU_CALLBACK
        );
    $items['admin/config/wimtvpro/wimlive/modify/%'] =
        array(
            'title' => 'Modify Event',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('wimtvpro_wimlive_formModify', 5),
            'access arguments' => array('administer users'),
            'type' =>  MENU_CALLBACK,
        );
    $items['admin/config/wimtvpro/registration'] =
        array(
            'file' => 'required/registration.inc',
            'title' => 'Registration WimTv',
            'page arguments' => array('wimtvproRegistration'),
            'access callback' => TRUE,
            'type' =>  MENU_CALLBACK
        );
    $items['admin/config/wimtvpro/wimlive/delete/%'] =
        array(
            'title' => 'Delete Event',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('wimtvpro_wimlive_delete', 5),
            'access arguments' => array('administer users'),
            'type' =>  MENU_CALLBACK,
        );
    $items['wimtvpro/elencoLive'] =
        array(
            'file' => 'views/wimlive.php',
            'page callback' => 'wimtvpro_tableLive',
            'access arguments' => array('access content'),
            'type' =>  MENU_CALLBACK,
        );
    $items['wimtvpro/viewEmbeddedPlaylist/%'] =
        array(
            'page callback' => 'wimtvpro_embeddedPlaylist_output',
            'page arguments' => array('wimtvpro_admin'),
            'access arguments' => array('access content'),
            'type' =>  MENU_CALLBACK,
        );
    $items['admin/config/wimtvpro/embedded'] =
        array(
            'title' => 'Video Embedded',
            'page callback' => 'wimtvpro_embedded',
            'page arguments' => array('wimtvpro_admin'),
            'access arguments' => array('administer users'),
            'type' =>  MENU_CALLBACK,
        );
    $items['admin/config/wimtvpro/embeddedAll'] =
        array(
            'title' => 'Preview Embedded',
            'page callback' => 'wimtvpro_embeddedAll',
            'page arguments' => array('wimtvpro_admin'),
            'access arguments' => array('administer users'),
            'type' =>  MENU_CALLBACK,
        );
    $items['admin/config/wimtvpro/wimtvproCallAjax'] =
        array(
            'file' => 'wimtvpro.sql.php',
            'page arguments' => array('wimtvproCallAjax'),
            'access callback' => TRUE,
            'type' =>  MENU_CALLBACK
        );
    $items['admin/config/wimtvpro/wimtvproCallSync'] =
        array(
            'file' => 'wimtvpro.sync.php',
            'page arguments' => array('wimtvproCallSync'),
            'access callback' => TRUE,
            'type' =>  MENU_CALLBACK
        );
    $items['admin/config/wimtvpro/pricing'] =
        array(
            'file' => 'required/pricing.inc',
            'access callback' => TRUE,
            'type' =>  MENU_CALLBACK
        );
    $items['wimtvpro/embedded'] =
        array(
            'title' => 'Video Embedded',
            'page callback' => 'wimtvpro_embedded_output',
            'page arguments' => array('wimtvpro_public'),
            'access arguments' => array('access content'),
            'type' =>  MENU_CALLBACK
        );
    $items['wimtvpro'] =
        array(
            'title' => 'WimVod Video',
            'page arguments' => array('wimtvpro_public'),
            'page callback' => 'wimtvpro_public',
            'access arguments' => array('access content'),
            'type' =>  MENU_CALLBACK
        );
    $items['wimlive'] =
        array(
            'title' => 'Live',
            'page arguments' => array('wimtvpro_live_public'),
            'page callback' => 'wimtvpro_live_public',
            'access arguments' => array('access content'),
            'type' =>  MENU_NORMAL_ITEM
        );
    $items['wimtvpro/viewEmbeddedPlayer/%'] =
        array(
            'page callback' => 'wimtvpro_plus_embeddedAll',
            'page arguments' => array('wimtvpro_admin'),
            'access arguments' => array('access content'),
            'type' =>  MENU_CALLBACK,
        );
    $items['wimtvpro/viewEmbeddedPlaylist/%'] =
        array(
            'page callback' => 'wimtvpro_embeddedPlaylist',
            'page arguments' => array('wimtvpro_admin'),
            'access arguments' => array('access content'),
            'type' =>  MENU_CALLBACK,
        );
    return $items;

}

function wimtvpro_admin_paths_alter(&$paths) {
    $paths['admin/config/wimtvpro/wimlive/webproducer/*'] = FALSE;
}

function wimtvpro_schema_alter(&$schema) {
    $schema['wimtvpro_playlist'] =
        array(
            'description' => t('Playlist Api WIMTV'),
            'fields' => array('id' => array('description' => t('Id of Playlist'),
                              'type' => 'serial',
                              'not null' => TRUE),
                              'name' => array('description' => t('Name of Playlist'),
                                              'type' => 'text',
                                              'not null' => FALSE),
                              'listVideo' => array('description' => t('List video contentidentifier'),
                                                   'type' => 'text',
                                                   'not null' => FALSE),
                              'option' => array('description' => t('option playlist'),
                                                'type' => 'text',
                                                'not null' => FALSE),
                              'uid' => array('description' => t('User identifier'),
                                             'type' => 'varchar',
                                             'length' => 100,
                                             'not null' => TRUE),),
            'primary key' => array('id'),
            'unique keys' => array('mycolumn1' => array('id'))
        );
    return $schema;
}

function wimtvpro_access() {
  return user_access('administer content') && user_access('use PHP for settings');
}

//Create object to support json and array
function wimtvpro_objectToArray($d) {
  if (is_object($d)) {
      // Gets the properties of the given object
      // with get_object_vars function
      $d = get_object_vars($d);
  }

  if (is_array($d)) {
  /*
   * Return array converted to object
   * Using __FUNCTION__ (Magic constant)
   * for recursive call
   */
    return array_map(__FUNCTION__, $d);
  }
  else {
    return $d;
  }
}

//Install function for jquery and css
function wimtvpro_install_jquery($sortable=FALSE, $private=FALSE) {
    global $base_url;
    drupal_add_library('system', 'ui');
    drupal_add_js("var url_pathPlugin ='" . $base_url . "';" , "inline", array('group' => CSS_DEFAULT, 'every_page' => TRUE));
    drupal_add_js(drupal_get_path('module', 'wimtvpro') . '/jquery/colorbox/js/jquery.colorbox.js');
    drupal_add_css(drupal_get_path('module', 'wimtvpro') . '/jquery/colorbox/css/colorbox.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
    drupal_add_js(drupal_get_path('module', 'wimtvpro') . '/jquery/jwplayer/jwplayer.js');
    if ($private==FALSE) {

      drupal_add_css(drupal_get_path('module', 'wimtvpro') . '/css/wimtvpro_public.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
      drupal_add_js(drupal_get_path('module', 'wimtvpro') . '/wimtvpro.js');
      drupal_add_js('jQuery(document).ready(function() { jQuery("ul.itemsPublic li a").colorbox();});' , 'inline');
    }
    else {
      drupal_add_css(drupal_get_path('module', 'wimtvpro') . '/css/wimtvpro.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
      drupal_add_css(drupal_get_path('module', 'wimtvpro') . '/jquery/css/redmond/jquery-ui-1.8.21.custom.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));

      drupal_add_js('jQuery(document).ready(function(){

        jQuery("a.viewThumb").click( function(){
                      var basePath = Drupal.settings.basePath;
                      jQuery(this).colorbox({href:url_pathPlugin + jQuery(this).attr("id")});
                    });
                    jQuery("a.wimtv-thumbnail").click( function(){
                        var basePath = Drupal.settings.basePath;
                        if( jQuery(this).parent().children(".headerBox").children(".icon").children("a.viewThumb").length  ) {
                            var url = jQuery(this).parent().children(".headerBox").children(".icon").children("a.viewThumb").attr("id");
                            jQuery(this).colorbox({href:url_pathPlugin + url});
                        }
                    });
      });', 'inline');

    if ($sortable) {
      drupal_add_library('system', 'ui.sortable');


      drupal_add_js('
    jQuery(document).ready(function(){

    /*SORTABLE*/
    jQuery( ".items" ).sortable({
    placeholder: "ui-state-highlight",
    handle : ".icon_moveThumbs",
    });

    /*SAVE SORTABLE*/
    jQuery("#save").click(function(){
    var ordina =	jQuery(".items").sortable("toArray") ;

    jQuery.ajax({
    context: this,
    url: "' . wimtvpro_checkCleanUrl("admin/config/wimtvpro/", "wimtvproCallAjax") . '",
    type: "GET",
    dataType: "html",
    data: "namefunction=ReSortable&ordina=" + ordina ,

    beforeSend: function(){
    jQuery(".icon").hide();
    jQuery(".loader").show();
    },

    success: function(data) {

    jQuery(".icon").show();
    jQuery(".loader").hide();

    },

    error: function(request,error) {
    alert(request.responseText);
    }



    });
    });

    });	', 'inline');

    }
    drupal_add_js(drupal_get_path('module', 'wimtvpro') . '/wimtvpro.js');
    }
}

